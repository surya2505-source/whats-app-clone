{"version":3,"sources":["firebase.js","components/Chats.js","StateProvider.js","components/Sidebar.js","components/ChatRoom.js","reducer.js","components/Footer.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","firestore","authentication","auth","provider","GoogleAuthProvider","Chats","addChat","id","name","useState","avatars","setavatars","messages","setmessages","useEffect","Math","floor","random","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","chatName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setrooms","user","unsubsctibe","photoURL","placeholder","type","room","key","ChatRoom","input","setinput","roomid","useParams","roomname","setroomname","Date","length","timestamp","toDate","toUTCString","displayName","onChange","event","target","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","console","log","Footer","href","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c1112a3.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAhLAq72mQE0XSLTJi0JQ9W_4hPRnSq0Ms\",\r\n  authDomain: \"whatsapp-web-app.firebaseapp.com\",\r\n  databaseURL: \"https://whatsapp-web-app.firebaseio.com\",\r\n  projectId: \"whatsapp-web-app\",\r\n  storageBucket: \"whatsapp-web-app.appspot.com\",\r\n  messagingSenderId: \"447625592535\",\r\n  appId: \"1:447625592535:web:7b12f05af214069d62fa92\",\r\n  measurementId: \"G-0WQ68D5888\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst database = firebaseApp.firestore();\r\nconst authentication = firebaseApp.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { database, authentication, provider };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Chats.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { database } from \"../firebase\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Chats({ addChat, id, name }) {\r\n  const [avatars, setavatars] = useState(\"\");\r\n  const [messages, setmessages] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setavatars(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      database\r\n        .collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setmessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [id]);\r\n\r\n  const addnewChat = () => {\r\n    const chatName = prompt(\"Enter A name\");\r\n\r\n    if (chatName) {\r\n      database.collection(\"rooms\").add({\r\n        name: chatName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return !addChat ? (\r\n    <Link to={`/rooms/${id}`}>\r\n      <div className=\"chats\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${avatars}.svg`} />\r\n        <div className=\"chats__info\">\r\n          <h3>{name}</h3>\r\n          <p>{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div onClick={addnewChat} className=\"chats\">\r\n      <h2>Add New Chat</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chats;\r\n","import React, { createContext, useReducer, useContext } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Chats from \"./Chats\";\r\nimport { database } from \"../firebase\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nfunction Sidebar() {\r\n  const [rooms, setrooms] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    const unsubsctibe = database.collection(\"rooms\").onSnapshot((snapshot) =>\r\n      setrooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      unsubsctibe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar src={user?.photoURL} />\r\n        <div className=\"sidebar__headerright\">\r\n          <DonutLargeIcon />\r\n          <ChatIcon />\r\n          <MoreVertIcon />\r\n        </div>\r\n      </div>\r\n      <div className=\"siebar__search\">\r\n        <div className=\"sidebar__searchcontainer\">\r\n          <SearchIcon />\r\n          <input placeholder=\"chats\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__chhatsGroups\">\r\n        <Chats addChat />\r\n        {rooms.map((room) => (\r\n          <Chats key={room.id} id={room.id} name={room.data.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"firebase\";\r\nimport \"./ChatRoom.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SentimentVerySatisfiedIcon from \"@material-ui/icons/SentimentVerySatisfied\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { database } from \"../firebase\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nfunction ChatRoom() {\r\n  const [input, setinput] = useState(\"\");\r\n  const { roomid } = useParams();\r\n  const [roomname, setroomname] = useState(\"\");\r\n  const [message, setmessages] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    if (roomid) {\r\n      database\r\n        .collection(\"rooms\")\r\n        .doc(roomid)\r\n        .onSnapshot((snapshot) => setroomname(snapshot.data().name));\r\n      database\r\n        .collection(\"rooms\")\r\n        .doc(roomid)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setmessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [roomid]);\r\n\r\n  const SendMessage = (event) => {\r\n    event.preventDefault();\r\n\r\n    database.collection(\"rooms\").doc(roomid).collection(\"messages\").add({\r\n      message: input,\r\n      name: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setinput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatroom\">\r\n      <div className=\"chatroom__header\">\r\n        <Avatar />\r\n        <div className=\"chatroom__headerinfoleft\">\r\n          <h3>{roomname}</h3>\r\n          <p>\r\n            last seen{\" \"}\r\n            {new Date(\r\n              message[message.length - 1]?.timestamp?.toDate()\r\n            ).toUTCString()}\r\n          </p>\r\n        </div>\r\n        <div className=\"chatroom__header__inforight\">\r\n          <SearchIcon />\r\n          <AttachFileIcon />\r\n          <MoreVertIcon />\r\n        </div>\r\n      </div>\r\n      <div className=\"chatroom__body\">\r\n        {message.map((message) => (\r\n          <p\r\n            className={`chatroom__message ${\r\n              message.name === user.displayName && `chatroom__messagerecierver`\r\n            }`}\r\n          >\r\n            <span className=\"chatroom__username\">{message.name}</span>\r\n            {message.message}\r\n            <span className=\"chatroom__messagetimestamp \">\r\n              {new Date(message.timestamp?.toDate()).toUTCString()}\r\n            </span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatroom__footer\">\r\n        <SentimentVerySatisfiedIcon />\r\n        <form>\r\n          <input\r\n            value={input}\r\n            onChange={(event) => setinput(event.target.value)}\r\n            placeholder=\"Type your message here\"\r\n          />\r\n          <button onClick={SendMessage} type=\"submit\">\r\n            <SendIcon />\r\n          </button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n","export const initialState = {\r\n  user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n  SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport \"./Footer.css\";\r\n// import \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nfunction Footer() {\r\n  return (\r\n    <div>\r\n      <div className=\"footer\">\r\n        <a className=\"\" href=\"https://github.com/surya2505\">\r\n          <GitHubIcon className=\"github__logo\" />\r\n        </a>\r\n        <h3>Made by surya | 2021</h3>\r\n        <p>\r\n          <strong>Made Using React</strong>\r\n        </p>\r\n        <p>\r\n          I do not own WhatsApp brand & logo, this web app clone was created only\r\n          to learn & show my skills in creating web applications and will never\r\n          be used for commercial purposes.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./Login.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { authentication, provider } from \"../firebase\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport { actionTypes } from \"../reducer\";\r\nimport Footer from \"./Footer\";\r\nfunction Login() {\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  const signIn = () => {\r\n    authentication\r\n      .signInWithPopup(provider)\r\n      .then((result) => {\r\n        dispatch({\r\n          type: actionTypes.SET_USER,\r\n          user: result.user,\r\n        });\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__body\">\r\n        <img\r\n          alt=\"whats app logo\"\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/800px-WhatsApp.svg.png\"\r\n        />\r\n        <div className=\"login__text\">\r\n          <h1>Welcome To WhatsApp Clone</h1>\r\n        </div>\r\n\r\n        <Button onClick={signIn}>SignIn with Google</Button>\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport ChatRoom from \"./components/ChatRoom\";\r\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Login from \"./components/Login\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction App() {\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {!user ? (\r\n        <Login />\r\n      ) : (\r\n        <div className=\"app__container\">\r\n          <Router>\r\n            <Sidebar />\r\n            <Switch>\r\n              <Route path=\"/rooms/:roomid\">\r\n                <ChatRoom />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <ChatRoom />\r\n              </Route>\r\n            </Switch>\r\n          </Router>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { StateProvider } from \"./StateProvider\";\r\nimport reducer, { initialState } from \"./reducer\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState={initialState} reducer={reducer}>\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}